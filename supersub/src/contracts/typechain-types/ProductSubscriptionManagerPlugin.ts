/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type ManifestExternalCallPermissionStruct = {
  externalAddress: AddressLike;
  permitAnySelector: boolean;
  selectors: BytesLike[];
};

export type ManifestExternalCallPermissionStructOutput = [
  externalAddress: string,
  permitAnySelector: boolean,
  selectors: string[],
] & {
  externalAddress: string;
  permitAnySelector: boolean;
  selectors: string[];
};

export type ManifestFunctionStruct = {
  functionType: BigNumberish;
  functionId: BigNumberish;
  dependencyIndex: BigNumberish;
};

export type ManifestFunctionStructOutput = [
  functionType: bigint,
  functionId: bigint,
  dependencyIndex: bigint,
] & { functionType: bigint; functionId: bigint; dependencyIndex: bigint };

export type ManifestAssociatedFunctionStruct = {
  executionSelector: BytesLike;
  associatedFunction: ManifestFunctionStruct;
};

export type ManifestAssociatedFunctionStructOutput = [
  executionSelector: string,
  associatedFunction: ManifestFunctionStructOutput,
] & {
  executionSelector: string;
  associatedFunction: ManifestFunctionStructOutput;
};

export type ManifestExecutionHookStruct = {
  executionSelector: BytesLike;
  preExecHook: ManifestFunctionStruct;
  postExecHook: ManifestFunctionStruct;
};

export type ManifestExecutionHookStructOutput = [
  executionSelector: string,
  preExecHook: ManifestFunctionStructOutput,
  postExecHook: ManifestFunctionStructOutput,
] & {
  executionSelector: string;
  preExecHook: ManifestFunctionStructOutput;
  postExecHook: ManifestFunctionStructOutput;
};

export type PluginManifestStruct = {
  interfaceIds: BytesLike[];
  dependencyInterfaceIds: BytesLike[];
  executionFunctions: BytesLike[];
  permittedExecutionSelectors: BytesLike[];
  permitAnyExternalAddress: boolean;
  canSpendNativeToken: boolean;
  permittedExternalCalls: ManifestExternalCallPermissionStruct[];
  userOpValidationFunctions: ManifestAssociatedFunctionStruct[];
  runtimeValidationFunctions: ManifestAssociatedFunctionStruct[];
  preUserOpValidationHooks: ManifestAssociatedFunctionStruct[];
  preRuntimeValidationHooks: ManifestAssociatedFunctionStruct[];
  executionHooks: ManifestExecutionHookStruct[];
};

export type PluginManifestStructOutput = [
  interfaceIds: string[],
  dependencyInterfaceIds: string[],
  executionFunctions: string[],
  permittedExecutionSelectors: string[],
  permitAnyExternalAddress: boolean,
  canSpendNativeToken: boolean,
  permittedExternalCalls: ManifestExternalCallPermissionStructOutput[],
  userOpValidationFunctions: ManifestAssociatedFunctionStructOutput[],
  runtimeValidationFunctions: ManifestAssociatedFunctionStructOutput[],
  preUserOpValidationHooks: ManifestAssociatedFunctionStructOutput[],
  preRuntimeValidationHooks: ManifestAssociatedFunctionStructOutput[],
  executionHooks: ManifestExecutionHookStructOutput[],
] & {
  interfaceIds: string[];
  dependencyInterfaceIds: string[];
  executionFunctions: string[];
  permittedExecutionSelectors: string[];
  permitAnyExternalAddress: boolean;
  canSpendNativeToken: boolean;
  permittedExternalCalls: ManifestExternalCallPermissionStructOutput[];
  userOpValidationFunctions: ManifestAssociatedFunctionStructOutput[];
  runtimeValidationFunctions: ManifestAssociatedFunctionStructOutput[];
  preUserOpValidationHooks: ManifestAssociatedFunctionStructOutput[];
  preRuntimeValidationHooks: ManifestAssociatedFunctionStructOutput[];
  executionHooks: ManifestExecutionHookStructOutput[];
};

export type SelectorPermissionStruct = {
  functionSelector: BytesLike;
  permissionDescription: string;
};

export type SelectorPermissionStructOutput = [
  functionSelector: string,
  permissionDescription: string,
] & { functionSelector: string; permissionDescription: string };

export type PluginMetadataStruct = {
  name: string;
  version: string;
  author: string;
  permissionDescriptors: SelectorPermissionStruct[];
};

export type PluginMetadataStructOutput = [
  name: string,
  version: string,
  author: string,
  permissionDescriptors: SelectorPermissionStructOutput[],
] & {
  name: string;
  version: string;
  author: string;
  permissionDescriptors: SelectorPermissionStructOutput[];
};

export type UserOperationStruct = {
  sender: AddressLike;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  callGasLimit: BigNumberish;
  verificationGasLimit: BigNumberish;
  preVerificationGas: BigNumberish;
  maxFeePerGas: BigNumberish;
  maxPriorityFeePerGas: BigNumberish;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type UserOperationStructOutput = [
  sender: string,
  nonce: bigint,
  initCode: string,
  callData: string,
  callGasLimit: bigint,
  verificationGasLimit: bigint,
  preVerificationGas: bigint,
  maxFeePerGas: bigint,
  maxPriorityFeePerGas: bigint,
  paymasterAndData: string,
  signature: string,
] & {
  sender: string;
  nonce: bigint;
  initCode: string;
  callData: string;
  callGasLimit: bigint;
  verificationGasLimit: bigint;
  preVerificationGas: bigint;
  maxFeePerGas: bigint;
  maxPriorityFeePerGas: bigint;
  paymasterAndData: string;
  signature: string;
};

export declare namespace ProductSubscriptionManagerPlugin {
  export type UserSubscriptionParamsStruct = {
    price: BigNumberish;
    chargeInterval: BigNumberish;
    tokenAddress: AddressLike;
    receivingAddress: AddressLike;
    destinationChain: BigNumberish;
  };

  export type UserSubscriptionParamsStructOutput = [
    price: bigint,
    chargeInterval: bigint,
    tokenAddress: string,
    receivingAddress: string,
    destinationChain: bigint,
  ] & {
    price: bigint;
    chargeInterval: bigint;
    tokenAddress: string;
    receivingAddress: string;
    destinationChain: bigint;
  };
}

export interface ProductSubscriptionManagerPluginInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUTHOR"
      | "NAME"
      | "VERSION"
      | "WETH"
      | "addCCIPchainSelector"
      | "addSupportedToken"
      | "ccipChainSelectors"
      | "charge"
      | "createProduct"
      | "createRecurringPayment"
      | "createSubscriptionPlan"
      | "currentChainId"
      | "hasSubscribedToPlan"
      | "isActivelySubscribedToPlan"
      | "numProducts"
      | "numSubscriptionPlans"
      | "onInstall"
      | "onUninstall"
      | "owner"
      | "pack"
      | "pluginManifest"
      | "pluginMetadata"
      | "postExecutionHook"
      | "preExecutionHook"
      | "preRuntimeValidationHook"
      | "preUserOpValidationHook"
      | "products"
      | "runtimeValidationFunction"
      | "subscribe"
      | "subscriptionPlans"
      | "subscriptionStatuses"
      | "supportedBridgingTokens"
      | "supportsInterface"
      | "swapFactory"
      | "swapRouter"
      | "tokenBridge"
      | "unsubscribe"
      | "updateProduct"
      | "updateSubscriptionPlan"
      | "updateUserSubscription"
      | "userOpValidationFunction"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PlanCreated"
      | "PlanSubscribed"
      | "PlanUnsubscribed"
      | "PlanUpdated"
      | "ProductCreated"
      | "ProductUpdated"
      | "SubscriptionCharged"
      | "UserSubscriptionChanged"
  ): EventFragment;

  encodeFunctionData(functionFragment: "AUTHOR", values?: undefined): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addCCIPchainSelector",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ccipChainSelectors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "charge",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createProduct",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish,
      ProductSubscriptionManagerPlugin.UserSubscriptionParamsStruct[],
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createRecurringPayment",
    values: [
      BigNumberish,
      ProductSubscriptionManagerPlugin.UserSubscriptionParamsStruct,
      BigNumberish,
      AddressLike,
      BigNumberish,
      string,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscriptionPlan",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasSubscribedToPlan",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isActivelySubscribedToPlan",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numProducts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numSubscriptionPlans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onInstall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onUninstall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pack",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pluginManifest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pluginMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postExecutionHook",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preExecutionHook",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preRuntimeValidationHook",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preUserOpValidationHook",
    values: [BigNumberish, UserOperationStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "runtimeValidationFunction",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [BigNumberish, BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionPlans",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionStatuses",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedBridgingTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribe",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProduct",
    values: [BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscriptionPlan",
    values: [BigNumberish, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserSubscription",
    values: [BigNumberish, BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userOpValidationFunction",
    values: [BigNumberish, UserOperationStruct, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "AUTHOR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addCCIPchainSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ccipChainSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "charge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRecurringPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscriptionPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSubscribedToPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActivelySubscribedToPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numSubscriptionPlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onInstall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onUninstall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pluginManifest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postExecutionHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preExecutionHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preRuntimeValidationHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preUserOpValidationHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "runtimeValidationFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionPlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedBridgingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscriptionPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userOpValidationFunction",
    data: BytesLike
  ): Result;
}

export namespace PlanCreatedEvent {
  export type InputTuple = [
    planId: BigNumberish,
    productId: BigNumberish,
    price: BigNumberish,
    chargeInterval: BigNumberish,
    tokenAddress: AddressLike,
    receivingAddress: AddressLike,
    destinationChain: BigNumberish,
  ];
  export type OutputTuple = [
    planId: bigint,
    productId: bigint,
    price: bigint,
    chargeInterval: bigint,
    tokenAddress: string,
    receivingAddress: string,
    destinationChain: bigint,
  ];
  export interface OutputObject {
    planId: bigint;
    productId: bigint;
    price: bigint;
    chargeInterval: bigint;
    tokenAddress: string;
    receivingAddress: string;
    destinationChain: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlanSubscribedEvent {
  export type InputTuple = [
    planId: BigNumberish,
    beneficiary: AddressLike,
    subscriber: AddressLike,
    paymentToken: AddressLike,
    endTime: BigNumberish,
  ];
  export type OutputTuple = [
    planId: bigint,
    beneficiary: string,
    subscriber: string,
    paymentToken: string,
    endTime: bigint,
  ];
  export interface OutputObject {
    planId: bigint;
    beneficiary: string;
    subscriber: string;
    paymentToken: string;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlanUnsubscribedEvent {
  export type InputTuple = [planId: BigNumberish, beneficiary: AddressLike];
  export type OutputTuple = [planId: bigint, beneficiary: string];
  export interface OutputObject {
    planId: bigint;
    beneficiary: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlanUpdatedEvent {
  export type InputTuple = [
    planId: BigNumberish,
    receivingAddress: AddressLike,
    destinationChain: BigNumberish,
    isActive: boolean,
  ];
  export type OutputTuple = [
    planId: bigint,
    receivingAddress: string,
    destinationChain: bigint,
    isActive: boolean,
  ];
  export interface OutputObject {
    planId: bigint;
    receivingAddress: string;
    destinationChain: bigint;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductCreatedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    name: BytesLike,
    provider: AddressLike,
    productType: BigNumberish,
    logoURL: string,
    description: string,
  ];
  export type OutputTuple = [
    productId: bigint,
    name: string,
    provider: string,
    productType: bigint,
    logoURL: string,
    description: string,
  ];
  export interface OutputObject {
    productId: bigint;
    name: string;
    provider: string;
    productType: bigint;
    logoURL: string;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductUpdatedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    provider: AddressLike,
    isActive: boolean,
  ];
  export type OutputTuple = [
    productId: bigint,
    provider: string,
    isActive: boolean,
  ];
  export interface OutputObject {
    productId: bigint;
    provider: string;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionChargedEvent {
  export type InputTuple = [
    planId: BigNumberish,
    beneficiary: AddressLike,
    paymentToken: AddressLike,
    paymentAmount: BigNumberish,
    timestamp: BigNumberish,
  ];
  export type OutputTuple = [
    planId: bigint,
    beneficiary: string,
    paymentToken: string,
    paymentAmount: bigint,
    timestamp: bigint,
  ];
  export interface OutputObject {
    planId: bigint;
    beneficiary: string;
    paymentToken: string;
    paymentAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserSubscriptionChangedEvent {
  export type InputTuple = [
    planId: BigNumberish,
    beneficiary: AddressLike,
    paymentToken: AddressLike,
    endTime: BigNumberish,
  ];
  export type OutputTuple = [
    planId: bigint,
    beneficiary: string,
    paymentToken: string,
    endTime: bigint,
  ];
  export interface OutputObject {
    planId: bigint;
    beneficiary: string;
    paymentToken: string;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProductSubscriptionManagerPlugin extends BaseContract {
  connect(runner?: ContractRunner | null): ProductSubscriptionManagerPlugin;
  waitForDeployment(): Promise<this>;

  interface: ProductSubscriptionManagerPluginInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUTHOR: TypedContractMethod<[], [string], "view">;

  NAME: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  WETH: TypedContractMethod<[], [string], "view">;

  addCCIPchainSelector: TypedContractMethod<
    [chainId: BigNumberish, CCIPSelector: BigNumberish],
    [void],
    "nonpayable"
  >;

  addSupportedToken: TypedContractMethod<
    [tokenAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  ccipChainSelectors: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  charge: TypedContractMethod<
    [planId: BigNumberish, beneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  createProduct: TypedContractMethod<
    [
      name: BytesLike,
      description: string,
      logoURL: string,
      productType: BigNumberish,
      initPlans: ProductSubscriptionManagerPlugin.UserSubscriptionParamsStruct[],
    ],
    [void],
    "nonpayable"
  >;

  createRecurringPayment: TypedContractMethod<
    [
      productId: BigNumberish,
      initPlan: ProductSubscriptionManagerPlugin.UserSubscriptionParamsStruct,
      endTime: BigNumberish,
      paymentToken: AddressLike,
      paymentTokenSwapFee: BigNumberish,
      description: string,
    ],
    [void],
    "nonpayable"
  >;

  createSubscriptionPlan: TypedContractMethod<
    [
      productId: BigNumberish,
      price: BigNumberish,
      chargeInterval: BigNumberish,
      tokenAddress: AddressLike,
      receivingAddress: AddressLike,
      destinationChain: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;

  currentChainId: TypedContractMethod<[], [bigint], "view">;

  hasSubscribedToPlan: TypedContractMethod<
    [planId: BigNumberish, beneficiary: AddressLike],
    [boolean],
    "view"
  >;

  isActivelySubscribedToPlan: TypedContractMethod<
    [planId: BigNumberish, beneficiary: AddressLike, gracePeriod: BigNumberish],
    [boolean],
    "view"
  >;

  numProducts: TypedContractMethod<[], [bigint], "view">;

  numSubscriptionPlans: TypedContractMethod<[], [bigint], "view">;

  onInstall: TypedContractMethod<[arg0: BytesLike], [void], "view">;

  onUninstall: TypedContractMethod<[arg0: BytesLike], [void], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pack: TypedContractMethod<
    [addr: AddressLike, functionId: BigNumberish],
    [string],
    "view"
  >;

  pluginManifest: TypedContractMethod<[], [PluginManifestStructOutput], "view">;

  pluginMetadata: TypedContractMethod<[], [PluginMetadataStructOutput], "view">;

  postExecutionHook: TypedContractMethod<
    [functionId: BigNumberish, preExecHookData: BytesLike],
    [void],
    "nonpayable"
  >;

  preExecutionHook: TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike,
    ],
    [string],
    "nonpayable"
  >;

  preRuntimeValidationHook: TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  preUserOpValidationHook: TypedContractMethod<
    [
      functionId: BigNumberish,
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
    ],
    [bigint],
    "nonpayable"
  >;

  products: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean, bigint] & {
        productType: bigint;
        provider: string;
        isActive: boolean;
        productId: bigint;
      },
    ],
    "view"
  >;

  runtimeValidationFunction: TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  subscribe: TypedContractMethod<
    [
      planId: BigNumberish,
      endTime: BigNumberish,
      paymentToken: AddressLike,
      beneficiary: AddressLike,
      paymentTokenSwapFee: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;

  subscriptionPlans: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, string, string, boolean] & {
        planId: bigint;
        productId: bigint;
        price: bigint;
        chargeInterval: bigint;
        destinationChain: bigint;
        tokenAddress: string;
        receivingAddress: string;
        isActive: boolean;
      },
    ],
    "view"
  >;

  subscriptionStatuses: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, string, string, bigint, boolean] & {
        lastChargeDate: bigint;
        startTime: bigint;
        endTime: bigint;
        paymentToken: string;
        chargedAddress: string;
        paymentTokenSwapFee: bigint;
        isActive: boolean;
      },
    ],
    "view"
  >;

  supportedBridgingTokens: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  swapFactory: TypedContractMethod<[], [string], "view">;

  swapRouter: TypedContractMethod<[], [string], "view">;

  tokenBridge: TypedContractMethod<[], [string], "view">;

  unsubscribe: TypedContractMethod<
    [planId: BigNumberish, beneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  updateProduct: TypedContractMethod<
    [productId: BigNumberish, provider: AddressLike, isActive: boolean],
    [void],
    "nonpayable"
  >;

  updateSubscriptionPlan: TypedContractMethod<
    [
      planId: BigNumberish,
      receivingAddress: AddressLike,
      destinationChain: BigNumberish,
      isActive: boolean,
    ],
    [void],
    "nonpayable"
  >;

  updateUserSubscription: TypedContractMethod<
    [
      planId: BigNumberish,
      endTime: BigNumberish,
      paymentToken: AddressLike,
      beneficiary: AddressLike,
      paymentTokenSwapFee: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;

  userOpValidationFunction: TypedContractMethod<
    [
      functionId: BigNumberish,
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUTHOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addCCIPchainSelector"
  ): TypedContractMethod<
    [chainId: BigNumberish, CCIPSelector: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addSupportedToken"
  ): TypedContractMethod<[tokenAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ccipChainSelectors"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "charge"
  ): TypedContractMethod<
    [planId: BigNumberish, beneficiary: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createProduct"
  ): TypedContractMethod<
    [
      name: BytesLike,
      description: string,
      logoURL: string,
      productType: BigNumberish,
      initPlans: ProductSubscriptionManagerPlugin.UserSubscriptionParamsStruct[],
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createRecurringPayment"
  ): TypedContractMethod<
    [
      productId: BigNumberish,
      initPlan: ProductSubscriptionManagerPlugin.UserSubscriptionParamsStruct,
      endTime: BigNumberish,
      paymentToken: AddressLike,
      paymentTokenSwapFee: BigNumberish,
      description: string,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSubscriptionPlan"
  ): TypedContractMethod<
    [
      productId: BigNumberish,
      price: BigNumberish,
      chargeInterval: BigNumberish,
      tokenAddress: AddressLike,
      receivingAddress: AddressLike,
      destinationChain: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasSubscribedToPlan"
  ): TypedContractMethod<
    [planId: BigNumberish, beneficiary: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isActivelySubscribedToPlan"
  ): TypedContractMethod<
    [planId: BigNumberish, beneficiary: AddressLike, gracePeriod: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "numProducts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numSubscriptionPlans"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onInstall"
  ): TypedContractMethod<[arg0: BytesLike], [void], "view">;
  getFunction(
    nameOrSignature: "onUninstall"
  ): TypedContractMethod<[arg0: BytesLike], [void], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pack"
  ): TypedContractMethod<
    [addr: AddressLike, functionId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "pluginManifest"
  ): TypedContractMethod<[], [PluginManifestStructOutput], "view">;
  getFunction(
    nameOrSignature: "pluginMetadata"
  ): TypedContractMethod<[], [PluginMetadataStructOutput], "view">;
  getFunction(
    nameOrSignature: "postExecutionHook"
  ): TypedContractMethod<
    [functionId: BigNumberish, preExecHookData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preExecutionHook"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike,
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preRuntimeValidationHook"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preUserOpValidationHook"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(nameOrSignature: "products"): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean, bigint] & {
        productType: bigint;
        provider: string;
        isActive: boolean;
        productId: bigint;
      },
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "runtimeValidationFunction"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscribe"
  ): TypedContractMethod<
    [
      planId: BigNumberish,
      endTime: BigNumberish,
      paymentToken: AddressLike,
      beneficiary: AddressLike,
      paymentTokenSwapFee: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(nameOrSignature: "subscriptionPlans"): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, string, string, boolean] & {
        planId: bigint;
        productId: bigint;
        price: bigint;
        chargeInterval: bigint;
        destinationChain: bigint;
        tokenAddress: string;
        receivingAddress: string;
        isActive: boolean;
      },
    ],
    "view"
  >;
  getFunction(nameOrSignature: "subscriptionStatuses"): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, string, string, bigint, boolean] & {
        lastChargeDate: bigint;
        startTime: bigint;
        endTime: bigint;
        paymentToken: string;
        chargedAddress: string;
        paymentTokenSwapFee: bigint;
        isActive: boolean;
      },
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportedBridgingTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "swapFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenBridge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unsubscribe"
  ): TypedContractMethod<
    [planId: BigNumberish, beneficiary: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProduct"
  ): TypedContractMethod<
    [productId: BigNumberish, provider: AddressLike, isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSubscriptionPlan"
  ): TypedContractMethod<
    [
      planId: BigNumberish,
      receivingAddress: AddressLike,
      destinationChain: BigNumberish,
      isActive: boolean,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateUserSubscription"
  ): TypedContractMethod<
    [
      planId: BigNumberish,
      endTime: BigNumberish,
      paymentToken: AddressLike,
      beneficiary: AddressLike,
      paymentTokenSwapFee: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userOpValidationFunction"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "PlanCreated"
  ): TypedContractEvent<
    PlanCreatedEvent.InputTuple,
    PlanCreatedEvent.OutputTuple,
    PlanCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PlanSubscribed"
  ): TypedContractEvent<
    PlanSubscribedEvent.InputTuple,
    PlanSubscribedEvent.OutputTuple,
    PlanSubscribedEvent.OutputObject
  >;
  getEvent(
    key: "PlanUnsubscribed"
  ): TypedContractEvent<
    PlanUnsubscribedEvent.InputTuple,
    PlanUnsubscribedEvent.OutputTuple,
    PlanUnsubscribedEvent.OutputObject
  >;
  getEvent(
    key: "PlanUpdated"
  ): TypedContractEvent<
    PlanUpdatedEvent.InputTuple,
    PlanUpdatedEvent.OutputTuple,
    PlanUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProductCreated"
  ): TypedContractEvent<
    ProductCreatedEvent.InputTuple,
    ProductCreatedEvent.OutputTuple,
    ProductCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProductUpdated"
  ): TypedContractEvent<
    ProductUpdatedEvent.InputTuple,
    ProductUpdatedEvent.OutputTuple,
    ProductUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCharged"
  ): TypedContractEvent<
    SubscriptionChargedEvent.InputTuple,
    SubscriptionChargedEvent.OutputTuple,
    SubscriptionChargedEvent.OutputObject
  >;
  getEvent(
    key: "UserSubscriptionChanged"
  ): TypedContractEvent<
    UserSubscriptionChangedEvent.InputTuple,
    UserSubscriptionChangedEvent.OutputTuple,
    UserSubscriptionChangedEvent.OutputObject
  >;

  filters: {
    "PlanCreated(uint256,uint256,uint256,uint256,address,address,uint256)": TypedContractEvent<
      PlanCreatedEvent.InputTuple,
      PlanCreatedEvent.OutputTuple,
      PlanCreatedEvent.OutputObject
    >;
    PlanCreated: TypedContractEvent<
      PlanCreatedEvent.InputTuple,
      PlanCreatedEvent.OutputTuple,
      PlanCreatedEvent.OutputObject
    >;

    "PlanSubscribed(uint256,address,address,address,uint256)": TypedContractEvent<
      PlanSubscribedEvent.InputTuple,
      PlanSubscribedEvent.OutputTuple,
      PlanSubscribedEvent.OutputObject
    >;
    PlanSubscribed: TypedContractEvent<
      PlanSubscribedEvent.InputTuple,
      PlanSubscribedEvent.OutputTuple,
      PlanSubscribedEvent.OutputObject
    >;

    "PlanUnsubscribed(uint256,address)": TypedContractEvent<
      PlanUnsubscribedEvent.InputTuple,
      PlanUnsubscribedEvent.OutputTuple,
      PlanUnsubscribedEvent.OutputObject
    >;
    PlanUnsubscribed: TypedContractEvent<
      PlanUnsubscribedEvent.InputTuple,
      PlanUnsubscribedEvent.OutputTuple,
      PlanUnsubscribedEvent.OutputObject
    >;

    "PlanUpdated(uint256,address,uint256,bool)": TypedContractEvent<
      PlanUpdatedEvent.InputTuple,
      PlanUpdatedEvent.OutputTuple,
      PlanUpdatedEvent.OutputObject
    >;
    PlanUpdated: TypedContractEvent<
      PlanUpdatedEvent.InputTuple,
      PlanUpdatedEvent.OutputTuple,
      PlanUpdatedEvent.OutputObject
    >;

    "ProductCreated(uint256,bytes32,address,uint8,string,string)": TypedContractEvent<
      ProductCreatedEvent.InputTuple,
      ProductCreatedEvent.OutputTuple,
      ProductCreatedEvent.OutputObject
    >;
    ProductCreated: TypedContractEvent<
      ProductCreatedEvent.InputTuple,
      ProductCreatedEvent.OutputTuple,
      ProductCreatedEvent.OutputObject
    >;

    "ProductUpdated(uint256,address,bool)": TypedContractEvent<
      ProductUpdatedEvent.InputTuple,
      ProductUpdatedEvent.OutputTuple,
      ProductUpdatedEvent.OutputObject
    >;
    ProductUpdated: TypedContractEvent<
      ProductUpdatedEvent.InputTuple,
      ProductUpdatedEvent.OutputTuple,
      ProductUpdatedEvent.OutputObject
    >;

    "SubscriptionCharged(uint256,address,address,uint256,uint256)": TypedContractEvent<
      SubscriptionChargedEvent.InputTuple,
      SubscriptionChargedEvent.OutputTuple,
      SubscriptionChargedEvent.OutputObject
    >;
    SubscriptionCharged: TypedContractEvent<
      SubscriptionChargedEvent.InputTuple,
      SubscriptionChargedEvent.OutputTuple,
      SubscriptionChargedEvent.OutputObject
    >;

    "UserSubscriptionChanged(uint256,address,address,uint256)": TypedContractEvent<
      UserSubscriptionChangedEvent.InputTuple,
      UserSubscriptionChangedEvent.OutputTuple,
      UserSubscriptionChangedEvent.OutputObject
    >;
    UserSubscriptionChanged: TypedContractEvent<
      UserSubscriptionChangedEvent.InputTuple,
      UserSubscriptionChangedEvent.OutputTuple,
      UserSubscriptionChangedEvent.OutputObject
    >;
  };
}
